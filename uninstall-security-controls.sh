#!/usr/bin/env bash
set -euo pipefail

# uninstall-security-controls.sh
# Safely remove installed security controls from a repository
# Usage: ./uninstall-security-controls.sh [--dry-run] [--yes]

DRY_RUN=0
YES=0

for arg in "$@"; do
  case "$arg" in
    --dry-run) DRY_RUN=1 ;;
    -y | --yes) YES=1 ;;
    -h | --help)
      cat <<USAGE
Uninstall Security Controls

Flags:
  --dry-run   Show what would be removed without changing anything
  -y, --yes   Do not prompt for confirmation
  -h, --help  Show this help
USAGE
      exit 0
      ;;
    *)
      echo "Unknown flag: $arg" >&2
      exit 2
      ;;
  esac
done

maybe_rm() {
  local path="$1"
  if [[ -e $path ]]; then
    if [[ $DRY_RUN -eq 1 ]]; then
      echo "[DRY RUN] rm -rf $path"
    else
      rm -rf "$path"
      echo "Removed: $path"
    fi
  fi
}

confirm() {
  if [[ $YES -eq 1 ]]; then return 0; fi
  read -r -p "This will remove security controls from this repo. Continue? (y/N): " ans
  [[ $ans =~ ^[Yy]$ ]]
}

main() {
  if ! confirm; then
    echo "Aborted."
    exit 1
  fi

  # Remove Git hooks
  if [[ -f .git/hooks/pre-push ]]; then
    if grep -q "Security Controls Installer" .git/hooks/pre-push 2>/dev/null; then
      maybe_rm .git/hooks/pre-push
    else
      echo "Skipping .git/hooks/pre-push (does not look generated by installer)"
    fi
  fi

  # Remove hooksPath dispatcher and chained hook
  if [[ -d .githooks/pre-push.d ]]; then
    for f in .githooks/pre-push.d/*security-pre-push; do
      [[ -e $f ]] && maybe_rm "$f"
    done
  fi
  [[ -f .githooks/pre-push ]] && echo "Note: hooksPath dispatcher retained at .githooks/pre-push"

  # Remove workflows installed by this tool
  maybe_rm .github/workflows/security.yml
  maybe_rm .github/workflows/pinning-validation.yml

  # Remove state/config
  maybe_rm .security-controls
  maybe_rm .security-controls-version

  # Remove docs installed by installer
  maybe_rm docs/security

  echo "Uninstall complete."
}

main "$@"
