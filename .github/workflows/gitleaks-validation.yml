name: Gitleaks Validation

on:
  workflow_dispatch:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  gitleaks:
    name: Validate gitleakslite against official gitleaks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Quick local gitleakslite (if present)
        run: |
          if [ -x ./.security-controls/bin/gitleakslite ]; then
            echo "Running quick gitleakslite detect check..."
            ./.security-controls/bin/gitleakslite detect --no-banner --redact || echo "gitleakslite found potential secrets (expected)"
          else
            echo "Local gitleakslite helper not present; skipping quick check."
          fi

      - name: Install and verify official gitleaks v8.28.0
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.local/bin"
          export PATH="$HOME/.local/bin:$PATH"

          # Download gitleaks v8.28.0 and verify checksum
          VERSION=v8.28.0
          BASE="https://github.com/gitleaks/gitleaks/releases/download/${VERSION}"
          CHECKSUMS_URL="${BASE}/gitleaks_${VERSION#v}_checksums.txt"
          TARBALL="gitleaks_${VERSION#v}_linux_x64.tar.gz"

          # Download checksums file
          curl -fsSLo /tmp/checksums.txt "${CHECKSUMS_URL}"

          # Download the Linux tarball
          curl -fsSLo "/tmp/${TARBALL}" "${BASE}/${TARBALL}"

          # Verify checksum
          awk -v tar="${TARBALL}" -v path="/tmp/${TARBALL}" '$2==tar { print $1, path }' /tmp/checksums.txt | sha256sum -c -

          # Extract and install gitleaks
          tar -xzf "/tmp/${TARBALL}" -C /tmp
          install -m 0755 /tmp/gitleaks "$HOME/.local/bin/gitleaks"
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Verify gitleaks version
        run: |
          gitleaks version

      - name: Create test files with secrets for validation
        run: |
          mkdir -p /tmp/secret-test
          cd /tmp/secret-test
          git init
          git config user.name "Gitleaks Test"
          git config user.email "test@example.com"

          # Create test files with known secrets
          cat > test-secrets.txt << 'EOF'
          # AWS credentials (fake test credentials)
          aws_access_key_id = AKIA-TEST-FAKE-ACCESS-KEY
          aws_secret_access_key = TEST-FAKE-SECRET-KEY-FOR-GITLEAKS-VALIDATION

          # GitHub token (fake test token)
          github_token = ghp_TEST-FAKE-TOKEN-FOR-GITLEAKS-VALIDATION

          # Generic API key (fake test key)
          api_key = sk-TEST-FAKE-API-KEY-FOR-GITLEAKS-VALIDATION

          # Slack token (fake test token)
          slack_token = xoxb-TEST-FAKE-TOKEN-FOR-GITLEAKS-VALIDATION
          EOF

          git add test-secrets.txt
          git commit -m "Add test secrets"

      - name: Run gitleakslite detect on test files
        id: gitleakslite_test
        run: |
          cd /tmp/secret-test
          set +e  # Don't exit on failure

          if [ -x "$GITHUB_WORKSPACE/.security-controls/bin/gitleakslite" ]; then
            echo "=== gitleakslite results ==="
            "$GITHUB_WORKSPACE/.security-controls/bin/gitleakslite" detect --no-banner --redact > /tmp/gitleakslite-output.txt 2>&1
            gitleakslite_rc=$?
            cat /tmp/gitleakslite-output.txt
            echo "gitleakslite_rc=${gitleakslite_rc}" >> "$GITHUB_OUTPUT"
          else
            echo "gitleakslite not found"
            echo "gitleakslite_rc=127" >> "$GITHUB_OUTPUT"
          fi

      - name: Run official gitleaks detect on test files
        id: gitleaks_test
        run: |
          cd /tmp/secret-test
          set +e  # Don't exit on failure

          echo "=== gitleaks results ==="
          gitleaks detect --no-banner --redact > /tmp/gitleaks-output.txt 2>&1
          gitleaks_rc=$?
          cat /tmp/gitleaks-output.txt
          echo "gitleaks_rc=${gitleaks_rc}" >> "$GITHUB_OUTPUT"

      - name: Compare results and validate gitleakslite behavior
        run: |
          echo "Comparison Results:"
          echo "gitleakslite exit code: ${{ steps.gitleakslite_test.outputs.gitleakslite_rc }}"
          echo "gitleaks exit code: ${{ steps.gitleaks_test.outputs.gitleaks_rc }}"

          # Both should detect secrets (exit code 1)
          if [[ "${{ steps.gitleakslite_test.outputs.gitleakslite_rc }}" -ne 1 ]]; then
            echo "❌ VALIDATION FAILED: gitleakslite should have detected secrets (exit code 1)"
            echo "   Actual exit code: ${{ steps.gitleakslite_test.outputs.gitleakslite_rc }}"
            exit 1
          fi

          if [[ "${{ steps.gitleaks_test.outputs.gitleaks_rc }}" -ne 1 ]]; then
            echo "❌ VALIDATION FAILED: gitleaks should have detected secrets (exit code 1)"
            echo "   Actual exit code: ${{ steps.gitleaks_test.outputs.gitleaks_rc }}"
            exit 1
          fi

          echo "✅ VALIDATION PASSED: Both tools detected secrets as expected"
          echo "✅ gitleakslite behavior matches official gitleaks"

      - name: Test on clean repository (should pass)
        run: |
          mkdir -p /tmp/clean-test
          cd /tmp/clean-test
          git init
          git config user.name "Gitleaks Test"
          git config user.email "test@example.com"

          echo "# Clean file with no secrets" > README.md
          git add README.md
          git commit -m "Clean commit"

          echo "=== Testing gitleakslite on clean repo ==="
          set +e
          if [ -x "$GITHUB_WORKSPACE/.security-controls/bin/gitleakslite" ]; then
            "$GITHUB_WORKSPACE/.security-controls/bin/gitleakslite" detect --no-banner
            gitleakslite_clean_rc=$?
          else
            gitleakslite_clean_rc=127
          fi

          echo "=== Testing gitleaks on clean repo ==="
          gitleaks detect --no-banner
          gitleaks_clean_rc=$?

          echo "Clean repo results:"
          echo "gitleakslite exit code: ${gitleakslite_clean_rc}"
          echo "gitleaks exit code: ${gitleaks_clean_rc}"

          # Both should pass clean repo (exit code 0)
          if [[ "${gitleakslite_clean_rc}" -ne 0 ]] && [[ "${gitleakslite_clean_rc}" -ne 127 ]]; then
            echo "❌ VALIDATION FAILED: gitleakslite should pass clean repo (exit code 0)"
            exit 1
          fi

          if [[ "${gitleaks_clean_rc}" -ne 0 ]]; then
            echo "❌ VALIDATION FAILED: gitleaks should pass clean repo (exit code 0)"
            exit 1
          fi

          echo "✅ VALIDATION PASSED: Both tools correctly passed clean repository"

      - name: Upload comparison outputs on failure
        if: failure()
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: gitleaks-validation-outputs
          path: |
            /tmp/gitleakslite-output.txt
            /tmp/gitleaks-output.txt