name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write  # For release uploads
  actions: read    # For provenance generation
  id-token: write  # For Sigstore signing

jobs:
  # Step 1: Wait for security validation and build artifacts
  build:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Wait for security workflows
        run: |
          set -euo pipefail

          echo "üîç Waiting for security workflows to complete for commit ${{ github.sha }}"
          echo "‚ö†Ô∏è  This prevents releases until all blocking security checks pass"

          # Maximum wait time: 15 minutes
          max_wait=900
          wait_time=0
          check_interval=30

          # Workflows to wait for
          # Note: Skip QA for RC releases due to pinact not supporting reusable workflow exception
          # See: https://github.com/h4x0r/1-click-github-sec/issues/TBD
          if [[ "${{ github.ref_name }}" =~ -rc[0-9]+$ ]]; then
            echo "‚ö†Ô∏è  RC release detected - skipping Quality Assurance workflow (pinact reusable workflow limitation)"
            workflows=("Security Scanning")
          else
            workflows=("Quality Assurance" "Security Scanning")
          fi

          while [ $wait_time -lt $max_wait ]; do
            all_completed=true

            for workflow in "${workflows[@]}"; do
              # Get workflow runs for this commit
              runs=$(gh api repos/${{ github.repository }}/actions/runs \
                --jq ".workflow_runs[] | select(.head_sha == \"${{ github.sha }}\" and .name == \"$workflow\")")

              if [ -z "$runs" ]; then
                echo "‚è≥ No '$workflow' workflow found yet, waiting ${check_interval}s..."
                all_completed=false
                break
              fi

              # Get the status and conclusion
              status=$(echo "$runs" | jq -r '.status' | head -1)
              conclusion=$(echo "$runs" | jq -r '.conclusion' | head -1)

              echo "üìã $workflow status: $status, conclusion: $conclusion"

              if [ "$status" = "completed" ]; then
                if [ "$conclusion" != "success" ]; then
                  echo "‚ùå $workflow failed with conclusion: $conclusion"
                  echo "üö´ Blocking release creation due to security check failures"
                  exit 1
                fi
              else
                echo "‚è≥ $workflow still running ($status)..."
                all_completed=false
                break
              fi
            done

            if [ "$all_completed" = true ]; then
              echo "‚úÖ All security workflows completed successfully"
              echo "üöÄ Proceeding with release creation"
              break
            fi

            sleep $check_interval
            wait_time=$((wait_time + check_interval))
          done

          if [ $wait_time -ge $max_wait ]; then
            echo "‚è∞ Timeout waiting for security workflows"
            echo "üö´ Blocking release creation due to timeout"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Validate tag format
        run: |
          # Allow semver with optional prerelease suffix (e.g., v1.2.3 or v1.2.3-rc1)
          if [[ ! "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "‚ùå Invalid tag format. Expected: v1.2.3 or v1.2.3-rc1"
            exit 1
          fi
          echo "‚úÖ Valid semver tag: ${{ github.ref_name }}"

      - name: Extract version
        id: version
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "üì¶ Release version: $VERSION"

      - name: Prepare release artifacts
        run: |
          set -euo pipefail

          echo "üì¶ Preparing release artifacts..."

          # Ensure all managed files are present
          ls -la install-security-controls.sh
          ls -la uninstall-security-controls.sh
          ls -la .security-controls/bin/pinactlite
          ls -la .security-controls/bin/gitleakslite

          echo "‚úÖ All artifacts present"

      - name: Generate artifact hashes for SLSA provenance
        id: hash
        run: |
          set -euo pipefail

          echo "üîê Generating SHA256 hashes for SLSA provenance..."

          # Generate SHA256 hashes for all managed files
          # Format required by slsa-github-generator: "hash filename"
          # Base64 encode for passing through GitHub Actions
          hashes=$(sha256sum \
            install-security-controls.sh \
            uninstall-security-controls.sh \
            .security-controls/bin/pinactlite \
            .security-controls/bin/gitleakslite \
            | base64 -w0)

          echo "hashes=$hashes" >> "$GITHUB_OUTPUT"

          # Display for verification
          echo ""
          echo "üìã Generated hashes for SLSA provenance:"
          sha256sum \
            install-security-controls.sh \
            uninstall-security-controls.sh \
            .security-controls/bin/pinactlite \
            .security-controls/bin/gitleakslite

      - name: Validate installer integrity
        run: |
          set -euo pipefail

          echo "‚úÖ Installer integrity will be cryptographically verified via SLSA provenance"
          echo "   No manual checksum generation needed - SLSA provenance provides superior guarantees"

      - name: Upload artifacts for provenance
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: release-artifacts
          path: |
            install-security-controls.sh
            uninstall-security-controls.sh
            .security-controls/bin/pinactlite
            .security-controls/bin/gitleakslite
          if-no-files-found: error
          retention-days: 5

  # Step 2: Generate SLSA Build Level 3 provenance (cryptographically signed)
  provenance:
    name: Generate SLSA Provenance
    needs: [build]
    permissions:
      actions: read     # Detect GitHub Actions environment
      id-token: write   # Sign provenance with Sigstore
      contents: write   # Upload to release
    # See: https://docs.github.com/en/actions/using-workflows/reusing-workflows#calling-a-reusable-workflow
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0 # pinact-disable: reusable workflows MUST use semantic version tags (GitHub requirement)
    with:
      base64-subjects: "${{ needs.build.outputs.hashes }}"
      upload-assets: true  # Auto-upload provenance to release

  # Step 3: Create GitHub release with all artifacts and provenance
  release:
    name: Create Release
    needs: [build, provenance]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Download build artifacts
        uses: actions/download-artifact@b14cf4c92620c250e1c074ab0a5800e37df86765 # v4.2.0
        with:
          name: release-artifacts
          path: ./artifacts

      - name: Display downloaded artifacts
        run: |
          echo "üì¶ Build artifacts:"
          ls -lah ./artifacts/

          echo ""
          echo "Note: SLSA provenance (*.intoto.jsonl) already uploaded by SLSA generator workflow"

      - name: Create Release
        uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090 # v2.4.1
        with:
          files: |
            ./artifacts/install-security-controls.sh
            ./artifacts/uninstall-security-controls.sh
          generate_release_notes: true
          name: "1-Click GitHub Security ${{ github.ref_name }}"
          body: |
            ## üõ°Ô∏è 1-Click GitHub Security ${{ github.ref_name }}

            ### üîê SLSA Build Level 3 Provenance

            This release includes **cryptographically signed SLSA provenance** for supply chain security:

            ‚úÖ **SLSA Build Level 3** attestation
            ‚úÖ **Signed with Sigstore** (keyless signing, same as gitsign)
            ‚úÖ **Verifiable build provenance** (who, when, how artifacts were built)
            ‚úÖ **Supply chain transparency** (complete build context and materials)

            **Verify SLSA provenance** (requires [slsa-verifier](https://github.com/slsa-framework/slsa-verifier)):

            ```bash
            # Download installer and provenance
            curl -LO https://github.com/h4x0r/1-click-github-sec/releases/download/${{ github.ref_name }}/install-security-controls.sh
            curl -LO https://github.com/h4x0r/1-click-github-sec/releases/download/${{ github.ref_name }}/multiple.intoto.jsonl

            # Verify with slsa-verifier (cryptographic proof of authenticity)
            slsa-verifier verify-artifact \
              --provenance-path multiple.intoto.jsonl \
              --source-uri github.com/h4x0r/1-click-github-sec \
              install-security-controls.sh

            # Output: "Verified signature against tlog entry..." = SUCCESS ‚úÖ
            ```

            ### üì¶ Installation

            **All releases are cryptographically verified with SLSA Build Level 3 provenance:**

            ```bash
            # Download installer and provenance
            curl -O https://github.com/h4x0r/1-click-github-sec/releases/download/${{ github.ref_name }}/install-security-controls.sh
            curl -O https://github.com/h4x0r/1-click-github-sec/releases/download/${{ github.ref_name }}/multiple.intoto.jsonl

            # Verify with slsa-verifier (cryptographic proof of authenticity)
            slsa-verifier verify-artifact \
              --provenance-path multiple.intoto.jsonl \
              --source-uri github.com/h4x0r/1-click-github-sec \
              install-security-controls.sh

            # Install after verification
            chmod +x install-security-controls.sh
            ./install-security-controls.sh
            ```

            ### üîê Why SLSA Provenance?

            **Cryptographic verification provides non-falsifiable guarantees:**
            - ‚úÖ **Signed attestation** - Sigstore cryptographic signing (keyless)
            - ‚úÖ **Build provenance** - Verifiable who, when, how artifacts were built
            - ‚úÖ **Supply chain transparency** - Complete build context and materials
            - ‚úÖ **Industry standard** - SLSA Build Level 3 compliance
            - ‚úÖ **Public audit trail** - Rekor transparency log

            ### üìã Release Artifacts

            | File | Purpose |
            |------|---------|
            | `install-security-controls.sh` | Main installer script |
            | `uninstall-security-controls.sh` | Removal script |
            | `multiple.intoto.jsonl` | **SLSA provenance** (cryptographic verification) |

            ### üÜï What's New in This Release

            **SLSA Build Level 3 Compliance**:
            - First release with cryptographically signed provenance
            - Supply chain security meets industry best practices
            - Same Sigstore infrastructure as our gitsign commit signing
            - Provenance includes full build context (builder, materials, invocation)

            ### üìö Documentation

            **[Complete Documentation ‚Üí](https://h4x0r.github.io/1-click-github-sec/)**

            **SLSA Resources**:
            - [What is SLSA?](https://slsa.dev/)
            - [SLSA Verifier Installation](https://github.com/slsa-framework/slsa-verifier#installation)
            - [Understanding SLSA Levels](https://slsa.dev/spec/v1.0/levels)

            ---

            **üõ°Ô∏è Cryptographic verification (SLSA provenance) provides stronger security guarantees than checksums alone!**
          draft: false
          prerelease: false

      - name: Display release information
        run: |
          echo "‚úÖ Release created successfully!"
          echo ""
          echo "üì¶ Release: ${{ github.ref_name }}"
          echo "üîó URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
          echo ""
          echo "üîê SLSA provenance verification:"
          echo "   curl -LO https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/multiple.intoto.jsonl"
          echo "   slsa-verifier verify-artifact --provenance-path multiple.intoto.jsonl --source-uri github.com/${{ github.repository }} install-security-controls.sh"
