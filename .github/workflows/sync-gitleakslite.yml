name: Sync Gitleakslite Script

on:
  push:
    paths:
      - '.security-controls/bin/gitleakslite'
      - 'install-security-controls.sh'
  pull_request:
    paths:
      - '.security-controls/bin/gitleakslite'
      - 'install-security-controls.sh'

permissions:
  contents: read

jobs:
  validate-sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Validate gitleakslite binary synchronization
        run: |
          set -euo pipefail

          # Create test environment
          mkdir -p test-sync
          cd test-sync
          git init -q
          git config user.email test@example.com
          git config user.name Test

          # Run installer (should install gitleakslite)
          bash ../install-security-controls.sh --language=generic --no-ci --no-docs --force

          # Test that gitleakslite was installed
          if [[ ! -x ".security-controls/bin/gitleakslite" ]]; then
            echo "‚ùå gitleakslite not installed by installer"
            exit 1
          fi

          # Verify binary synchronization using digital fingerprint
          INSTALLER_SHA=$(sha256sum .security-controls/bin/gitleakslite | cut -d' ' -f1)
          REPO_SHA=$(sha256sum ../.security-controls/bin/gitleakslite | cut -d' ' -f1)

          echo "Installer SHA256: $INSTALLER_SHA"
          echo "Repository SHA256: $REPO_SHA"

          if [[ "$INSTALLER_SHA" != "$REPO_SHA" ]]; then
            echo "‚ùå Binary synchronization failed - gitleakslite files differ"
            echo "This indicates version drift between installer and repository"
            exit 1
          fi

          echo "‚úÖ Binary synchronization validated - files are identical"

      - name: Validate installer methodology
        run: |
          set -euo pipefail

          # Test installer approach (copy vs generate)
          mkdir -p method-test
          cd method-test
          git init -q
          git config user.email test@example.com
          git config user.name Test

          # Run installer to see which method it uses
          echo "üìä Testing installer methodology..."

          if bash ../install-security-controls.sh --language=generic --no-ci --no-docs --force 2>&1 | grep -q "Copied gitleakslite from canonical source"; then
            echo "‚úÖ Installer correctly copies from canonical source"
          elif bash ../install-security-controls.sh --language=generic --no-ci --no-docs --force 2>&1 | grep -q "Downloaded gitleakslite from repository"; then
            echo "‚úÖ Installer correctly downloads from repository"
          else
            echo "‚ö†Ô∏è Installer used fallback generation method"
            echo "This may indicate the canonical source is not available"
          fi

      - name: Verify synchronization approach
        run: |
          set -euo pipefail

          echo "üìã Validating synchronization strategy..."

          # Verify the installer copies/downloads rather than generates
          if grep -q "cp.*\.security-controls/bin/gitleakslite" install-security-controls.sh; then
            echo "‚úÖ Installer configured to copy from canonical source"
          else
            echo "‚ùå Installer not configured for file copying"
            exit 1
          fi

          if grep -q "curl.*gitleakslite" install-security-controls.sh; then
            echo "‚úÖ Installer has repository download fallback"
          else
            echo "‚ùå Installer missing repository download fallback"
            exit 1
          fi

          echo "‚úÖ Synchronization approach validated"

      - name: Verify no embedded gitleakslite patterns
        run: |
          # Ensure installer doesn't contain old embedded gitleakslite script patterns
          if grep -q "gitleakslite (script) - minimal secret scanner" install-security-controls.sh; then
            echo "‚ùå Found old minimal scanner description in installer"
            echo "Installer should copy from repository, not embed patterns"
            exit 1
          fi

          if grep -q "patterns='AKIA\[0-9A-Z\]" install-security-controls.sh; then
            echo "‚ùå Found embedded static patterns in installer"
            echo "Installer should use dynamic patterns from repository"
            exit 1
          fi

          echo "‚úÖ No embedded patterns found - installer uses repository source"

      - name: Test E2E workflow compatibility
        run: |
          # Simulate the E2E test environment expectations
          mkdir -p e2e-test
          cd e2e-test
          git init -q
          git config user.email e2e@example.com
          git config user.name E2E

          # Copy installer and run it (same as E2E test)
          cp ../install-security-controls.sh .
          bash ./install-security-controls.sh --language=generic --no-ci --no-docs --force

          # Verify the tool that E2E expects exists and is executable
          if [[ ! -x ".security-controls/bin/gitleakslite" ]]; then
            echo "‚ùå E2E test expects gitleakslite but installer didn't create it"
            exit 1
          fi

          # Verify it's the same as repository version (binary identity)
          E2E_SHA=$(sha256sum .security-controls/bin/gitleakslite | cut -d' ' -f1)
          REPO_SHA=$(sha256sum ../.security-controls/bin/gitleakslite | cut -d' ' -f1)

          if [[ "$E2E_SHA" != "$REPO_SHA" ]]; then
            echo "‚ùå E2E gitleakslite differs from repository version"
            exit 1
          fi

          echo "‚úÖ E2E workflow compatibility verified - binary identity confirmed"

      - name: Validate deployment consistency
        run: |
          set -euo pipefail

          echo "üìã Final deployment consistency check..."

          # Verify installer produces identical tool regardless of environment
          mkdir -p deployment-test
          cd deployment-test
          git init -q
          git config user.email deploy@example.com
          git config user.name Deploy

          # Test multiple installer runs produce identical results
          bash ../install-security-controls.sh --language=generic --no-ci --no-docs --force
          FIRST_SHA=$(sha256sum .security-controls/bin/gitleakslite | cut -d' ' -f1)

          rm -rf .security-controls
          bash ../install-security-controls.sh --language=generic --no-ci --no-docs --force
          SECOND_SHA=$(sha256sum .security-controls/bin/gitleakslite | cut -d' ' -f1)

          if [[ "$FIRST_SHA" != "$SECOND_SHA" ]]; then
            echo "‚ùå Installer produces inconsistent results across runs"
            exit 1
          fi

          echo "‚úÖ Deployment consistency validated - deterministic installer behavior"