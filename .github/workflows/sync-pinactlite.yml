name: Sync Pinactlite Script

on:
  push:
    paths:
      - '.security-controls/bin/pinactlite'
      - 'install-security-controls.sh'
  pull_request:
    paths:
      - '.security-controls/bin/pinactlite'
      - 'install-security-controls.sh'

permissions:
  contents: read

jobs:
  validate-sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Validate pinactlite binary synchronization
        run: |
          set -euo pipefail

          # Create test environment
          mkdir -p test-sync
          cd test-sync
          git init -q
          git config user.email test@example.com
          git config user.name Test

          # Run installer (should install pinactlite)
          bash ../install-security-controls.sh --language=generic --no-ci --no-docs --force

          # Test that pinactlite was installed
          if [[ ! -x ".security-controls/bin/pinactlite" ]]; then
            echo "‚ùå pinactlite not installed by installer"
            exit 1
          fi

          # Verify binary synchronization using digital fingerprint
          INSTALLER_SHA=$(sha256sum .security-controls/bin/pinactlite | cut -d' ' -f1)
          REPO_SHA=$(sha256sum ../.security-controls/bin/pinactlite | cut -d' ' -f1)

          echo "Installer SHA256: $INSTALLER_SHA"
          echo "Repository SHA256: $REPO_SHA"

          if [[ "$INSTALLER_SHA" != "$REPO_SHA" ]]; then
            echo "‚ùå Binary synchronization failed - pinactlite files differ"
            echo "This indicates version drift between installer and repository"
            exit 1
          fi

          echo "‚úÖ Binary synchronization validated - files are identical"

      - name: Validate installer methodology
        run: |
          set -euo pipefail

          # Test installer approach (copy vs generate)
          mkdir -p method-test
          cd method-test
          git init -q
          git config user.email test@example.com
          git config user.name Test

          # Run installer and capture output
          echo "üìä Testing installer methodology..."

          # Capture full installer output
          INSTALLER_OUTPUT=$(bash ../install-security-controls.sh --language=generic --no-ci --no-docs --force 2>&1)

          # Check which method was used
          if echo "$INSTALLER_OUTPUT" | grep -q "Copied pinactlite from canonical source"; then
            echo "‚úÖ Installer correctly copies from canonical source"
          elif echo "$INSTALLER_OUTPUT" | grep -q "Downloaded pinactlite from repository"; then
            echo "‚úÖ Installer correctly downloads from repository"
          else
            echo "‚ùå Installer used unexpected method"
            echo "Expected output containing either:"
            echo "  - 'Copied pinactlite from canonical source'"
            echo "  - 'Downloaded pinactlite from repository'"
            echo ""
            echo "Actual installer output:"
            echo "$INSTALLER_OUTPUT"
            exit 1
          fi

      - name: Verify no embedded pincheck references
        run: |
          # Ensure installer doesn't contain old embedded pincheck script
          if grep -q "script-only pincheck helper" install-security-controls.sh; then
            echo "‚ùå Found old embedded pincheck reference in installer"
            echo "Installer should copy from repository, not embed script"
            exit 1
          fi

          if grep -q "install_pincheck_script" install-security-controls.sh; then
            echo "‚ùå Found old install_pincheck_script function call"
            echo "Installer should use pinactlite copy approach"
            exit 1
          fi

          # Verify installer uses copy/download approach
          if ! grep -q "cp.*\.security-controls/bin/pinactlite" install-security-controls.sh; then
            echo "‚ùå Installer not configured to copy pinactlite from canonical source"
            exit 1
          fi

          echo "‚úÖ Installer correctly configured to copy from repository"

      - name: Test E2E workflow compatibility
        run: |
          # Simulate the E2E test environment
          mkdir -p e2e-test
          cd e2e-test
          git init -q
          git config user.email e2e@example.com
          git config user.name E2E

          # Copy installer and run it (same as E2E test)
          cp ../install-security-controls.sh .
          bash ./install-security-controls.sh --language=generic --no-ci --no-docs --force

          # Verify the tool that E2E expects exists and is executable
          if [[ ! -x ".security-controls/bin/pinactlite" ]]; then
            echo "‚ùå E2E test expects pinactlite but installer didn't create it"
            exit 1
          fi

          # Verify it's the same as repository version (binary identity)
          E2E_SHA=$(sha256sum .security-controls/bin/pinactlite | cut -d' ' -f1)
          REPO_SHA=$(sha256sum ../.security-controls/bin/pinactlite | cut -d' ' -f1)

          if [[ "$E2E_SHA" != "$REPO_SHA" ]]; then
            echo "‚ùå E2E pinactlite differs from repository version"
            exit 1
          fi

          echo "‚úÖ E2E workflow compatibility verified - binary identity confirmed"