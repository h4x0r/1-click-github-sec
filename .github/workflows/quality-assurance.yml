name: Quality Assurance

on:
  workflow_dispatch:
  pull_request:
  push:
    branches: ["**"]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =============================================================================
  # CRITICAL JOBS - Must pass for release (blocking)
  # =============================================================================

  critical-validation:
    name: 🚫 Critical Validation (Blocking)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Functional synchronization check
        run: |
          set -euo pipefail
          echo "🔍 Checking dogfooding plus compliance..."

          # Run functional synchronization check
          if [[ -f "./scripts/sync-security-controls.sh" ]]; then
            chmod +x ./scripts/sync-security-controls.sh
            ./scripts/sync-security-controls.sh --check
          else
            echo "❌ sync-security-controls.sh not found - critical for dogfooding plus compliance"
            exit 1
          fi

      - name: Critical documentation validation
        run: |
          set -euo pipefail
          echo "🔍 Running critical documentation validation..."

          # Run documentation validation script (blocking)
          if [[ -f "./scripts/validate-docs.sh" ]]; then
            chmod +x ./scripts/validate-docs.sh
            ./scripts/validate-docs.sh
          else
            echo "❌ validate-docs.sh not found - critical for consistency"
            exit 1
          fi

      - name: Security control functionality test
        run: |
          set -euo pipefail
          echo "🔍 Testing security controls functionality..."

          # Test that our security tools actually work
          if [[ -x "./.security-controls/bin/pinactlite" ]]; then
            echo "✅ Testing pinactlite functionality..."
            ./.security-controls/bin/pinactlite pincheck --dir .github/workflows
          fi

          if [[ -x "./.security-controls/bin/gitleakslite" ]]; then
            echo "✅ Testing gitleakslite functionality..."
            echo "test-secret-key=abc123" > /tmp/test-secret
            if ./.security-controls/bin/gitleakslite detect --no-banner --source /tmp/test-secret; then
              echo "❌ Secret detection failed - should have detected test secret"
              exit 1
            else
              echo "✅ Secret detection working correctly"
            fi
            rm -f /tmp/test-secret
          fi

  helpers-e2e:
    name: Helper tools E2E testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Run installer and test helpers
        run: |
          set -euo pipefail
          mkdir -p sandbox/.github/workflows
          cp install-security-controls.sh sandbox/
          cd sandbox
          git init -q
          git config user.email sandbox@example.com
          git config user.name Sandbox

          # Install helpers only (no CI/docs)
          bash ./install-security-controls.sh --language=generic --no-ci --no-docs --force

          # Create workflow with unpinned action and image
          UNPINNED_ACTION="actions/checkout@v4"
          cat > .github/workflows/test.yml <<YAML
          name: test
          on: [push]
          jobs:
            t:
              runs-on: ubuntu-latest
              container: library/busybox@sha256:d82f458899c9696cb26a7c02d5568f81c8c8223f8661bb2a7988b269c8b9051e
              steps:
                - uses: ${UNPINNED_ACTION}
          YAML

          # pinactlite should fail before autopin
          if ./.security-controls/bin/pinactlite pincheck --dir .github/workflows; then
            echo "pinactlite unexpectedly passed" >&2
            exit 1
          fi

          # autopin should update files and return rc=2
          set +e
          ./.security-controls/bin/pinactlite autopin --dir .github/workflows --actions --images
          rc=$?
          set -e
          if [ "$rc" -ne 2 ]; then
            echo "autopin exit code $rc (expected 2 when changes made)" >&2
            exit 1
          fi

          # Now pinactlite should pass
          ./.security-controls/bin/pinactlite pincheck --dir .github/workflows

          # Secret scanner detect should fail on obvious secret
          echo "password=secret123" > secret.txt
          git add secret.txt
          if ./.security-controls/bin/gitleakslite detect --no-banner; then
            echo "gitleakslite unexpectedly passed detect" >&2
            exit 1
          fi

          # Secret scanner protect should fail on staged secret
          if ./.security-controls/bin/gitleakslite protect --staged --no-banner --redact; then
            echo "gitleakslite unexpectedly passed protect --staged" >&2
            exit 1
          fi

  installer-self-test:
    name: Installer self-testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Run installer in sandbox (generic mode)
        run: |
          set -euo pipefail
          mkdir -p sandbox
          cp install-security-controls.sh sandbox/
          cd sandbox
          git init -q
          git config user.email sandbox@example.com
          git config user.name Sandbox
          # Use generic mode to avoid requiring Rust toolchain
          bash ./install-security-controls.sh --language=generic --no-ci --no-docs --force
          # Verify outputs
          test -x .git/hooks/pre-push || (echo "missing pre-push" && exit 1)
          test -x .security-controls/bin/gitleakslite || (echo "missing gitleakslite" && exit 1)
          test -x .security-controls/bin/pinactlite || (echo "missing pinactlite" && exit 1)
          test -f .security-controls/config.env || (echo "missing config.env" && exit 1)
          # Run pre-push hook directly (should succeed with no staged changes)
          .git/hooks/pre-push

  sha-pinning-validation:
    name: SHA pinning validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Quick local pinactlite (if present)
        run: |
          if [ -x ./.security-controls/bin/pinactlite ]; then
            ./.security-controls/bin/pinactlite pincheck --dir .github/workflows
          else
            echo "Local pinactlite helper not present; skipping quick check."
          fi

      - name: Install and verify tools, then install pinact v3.4.2
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.local/bin"
          export PATH="$HOME/.local/bin:$PATH"

          # 1) Install cosign v2.6.0 and verify with SHA256
          COSIGN_VERSION=v2.6.0
          COSIGN_BASE="https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}"
          COSIGN_BIN="cosign-linux-amd64"
          COSIGN_SHA="ea5c65f99425d6cfbb5c4b5de5dac035f14d09131c1a0ea7c7fc32eab39364f9"
          curl -fsSLo /tmp/${COSIGN_BIN} "${COSIGN_BASE}/${COSIGN_BIN}"
          echo "${COSIGN_SHA}  /tmp/${COSIGN_BIN}" | sha256sum -c -
          install -m 0755 /tmp/${COSIGN_BIN} "$HOME/.local/bin/cosign"

          # 2) Install slsa-verifier v2.7.1 and verify SHA256
          SLSA_VERIFIER_VERSION=v2.7.1
          SLSA_BIN="slsa-verifier-linux-amd64"
          SLSA_BASE="https://github.com/slsa-framework/slsa-verifier/releases/download/${SLSA_VERIFIER_VERSION}"
          SLSA_SHA="946dbec729094195e88ef78e1734324a27869f03e2c6bd2f61cbc06bd5350339"
          curl -fsSLo /tmp/${SLSA_BIN} "${SLSA_BASE}/${SLSA_BIN}"
          echo "${SLSA_SHA}  /tmp/${SLSA_BIN}" | sha256sum -c -
          install -m 0755 /tmp/${SLSA_BIN} "$HOME/.local/bin/slsa-verifier"

          # 3) Download pinact v3.4.2 artifacts and verify signature + provenance + checksum
          VERSION=v3.4.2
          BASE="https://github.com/suzuki-shunsuke/pinact/releases/download/${VERSION}"

          # Fetch checksums and signature (prefer versioned filenames; fallback to plain)
          curl -fsSLo /tmp/checksums.txt "${BASE}/pinact_${VERSION#v}_checksums.txt" || \
          curl -fsSLo /tmp/checksums.txt "${BASE}/checksums.txt"

          curl -fsSLo /tmp/checksums.txt.pem "${BASE}/pinact_${VERSION#v}_checksums.txt.pem" || \
          curl -fsSLo /tmp/checksums.txt.pem "${BASE}/checksums.txt.pem"

          curl -fsSLo /tmp/checksums.txt.sig "${BASE}/pinact_${VERSION#v}_checksums.txt.sig" || \
          curl -fsSLo /tmp/checksums.txt.sig "${BASE}/checksums.txt.sig"

          # Cosign verification of checksums.txt certificate and signature (GitHub OIDC issuer)
          cosign verify-blob \
            --certificate /tmp/checksums.txt.pem \
            --signature /tmp/checksums.txt.sig \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com \
            --certificate-identity-regexp '^https://github.com/suzuki-shunsuke/(pinact|go-release-workflow)/.*' \
            /tmp/checksums.txt

          # OpenSSL verification as defense in depth
          # 1) Extract pubkey from certificate: try PEM directly, else decode base64-wrapped cert
          if ! openssl x509 -in /tmp/checksums.txt.pem -pubkey -noout > /tmp/pinact.pub 2>/dev/null; then
            base64 -d /tmp/checksums.txt.pem > /tmp/checksums.txt.pem.dec
            openssl x509 -in /tmp/checksums.txt.pem.dec -pubkey -noout > /tmp/pinact.pub
          fi
          # 2) Prepare signature: decode base64 if needed, else use raw signature
          if ! base64 -d /tmp/checksums.txt.sig > /tmp/checksums.txt.sig.bin 2>/dev/null; then
            cp /tmp/checksums.txt.sig /tmp/checksums.txt.sig.bin
          fi
          # 3) Verify
          openssl dgst -sha256 -verify /tmp/pinact.pub -signature /tmp/checksums.txt.sig.bin /tmp/checksums.txt

          # Determine Linux amd64 tarball name from checksums (support multiple conventions)
          TARBALL=""
          for name in "pinact_${VERSION#v}_linux_amd64.tar.gz" "pinact_linux_amd64.tar.gz" \
                     "pinact_${VERSION#v}_Linux_x86_64.tar.gz" "pinact_Linux_x86_64.tar.gz"; do
            if grep -q " ${name}$" /tmp/checksums.txt; then
              TARBALL="$name"; break
            fi
          done
          if [[ -z "$TARBALL" ]]; then
            echo "Unable to determine tarball name from checksums.txt" >&2
            echo "Available entries:" >&2
            cat /tmp/checksums.txt >&2
            exit 1
          fi
          echo "Selected tarball: ${TARBALL}"

          # Download the tarball using the discovered name
          curl -fsSLo "/tmp/${TARBALL}" "${BASE}/${TARBALL}"

          # Checksum verification of the tarball
          awk -v tar="${TARBALL}" -v path="/tmp/${TARBALL}" '$2==tar { print $1, path }' /tmp/checksums.txt | sha256sum -c -

          # Try to download provenance with fallbacks
          PROV=""
          for prov in multiple.intoto.jsonl provenance.intoto.jsonl attestation.intoto.jsonl; do
            if curl -fsSLo "/tmp/${prov}" "${BASE}/${prov}"; then PROV="/tmp/${prov}"; break; fi
          done

          # SLSA provenance verification for the tarball (if provenance is available)
          if [[ -n "${PROV}" ]]; then
            echo "Selected provenance: ${PROV}"
            slsa-verifier verify-artifact \
              --provenance-path "${PROV}" \
              --source-uri github.com/suzuki-shunsuke/pinact \
              --source-tag "${VERSION}" \
              "/tmp/${TARBALL}"
          else
            echo "Provenance file not found for ${VERSION}; skipping SLSA verification"
          fi

          # Extract and install pinact
          tar -xzf "/tmp/${TARBALL}"
          install -m 0755 pinact "$HOME/.local/bin/pinact"
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Verify pinact version (non-blocking)
        run: |
          pinact --version || true

      - name: Validate pins with pinact (capture result)
        id: pinact_check
        run: |
          set -euo pipefail
          OUT="/tmp/pinact-check.log"
          # Run pinact and capture actual exit of pinact (not tee)
          if pinact run --check | tee "$OUT"; then
            status=${PIPESTATUS[0]:-0}
          else
            status=${PIPESTATUS[0]:-1}
          fi
          echo "rc=${status}" >> "$GITHUB_OUTPUT"

      - name: Fail if pinact check failed
        if: ${{ steps.pinact_check.outputs.rc != '0' }}
        run: |
          echo "pinact --check failed (rc=${{ steps.pinact_check.outputs.rc }})"
          echo "--- pinact --check (first 400 lines) ---"
          sed -n '1,400p' /tmp/pinact-check.log || true
          echo "--- suspected violations (grep) ---"
          grep -nE 'unpinned|not pinned|missing @|image not pinned|ref not a 40-hex|docker action not pinned' /tmp/pinact-check.log || true
          exit 1

      - name: Upload pinact log on failure
        if: ${{ steps.pinact_check.outputs.rc != '0' }}
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: pinact-check-log
          path: /tmp/pinact-check.log

  # =============================================================================
  # QUALITY JOBS - Should fix but don't block release (non-blocking)
  # =============================================================================

  shell-script-linting:
    name: ⚠️ Shell Script Linting (Redundant - Pre-push covers this)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install shellcheck and shfmt
        run: |
          sudo apt-get update -y
          sudo apt-get install -y shellcheck shfmt

      - name: ShellCheck (Redundant check - blocked in pre-push)
        run: |
          set -euo pipefail
          echo "📝 Note: This check is BLOCKING in pre-push hook (fail fast design)"
          echo "📝 CI check is redundant validation only"
          # Fail on warnings and errors
          find . -type f -name "*.sh" -not -path "./.git/*" -print0 | xargs -0 -r shellcheck -S warning

      - name: shfmt (Redundant check - blocked in pre-push)
        run: |
          set -euo pipefail
          echo "📝 Note: This check is BLOCKING in pre-push hook (fail fast design)"
          echo "📝 CI check is redundant validation only"
          # Check formatting with 2-space indent, simplify, and case indent
          shfmt -d -i 2 -ci -s .

  vulnerability-scanning:
    name: 🚫 Trivy Vulnerability Scanning (Blocking)
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@afb54ba388a7dca6ecae48f608c4ff05ff4cc77a # v3.25.15
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  secret-scanning:
    name: 🚫 Comprehensive Secret Scanning (Blocking)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0  # Scan entire repository history

      - name: Run Gitleaks Action
        uses: gitleaks/gitleaks-action@ff98106e4c7b2bc287b24eaf42907196329070c7 # v2.3.9
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Local Gitleakslite for Comparison
        run: |
          set -euo pipefail
          if [[ -x "./.security-controls/bin/gitleakslite" ]]; then
            echo "🔍 Running local gitleakslite for validation..."
            ./.security-controls/bin/gitleakslite detect --no-banner --redact || true
          else
            echo "⚠️ Local gitleakslite not found, skipping comparison"
          fi

  documentation-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Validate documentation consistency
        run: |
          set -euo pipefail

          # Run documentation validation script
          if [[ -f "./scripts/validate-docs.sh" ]]; then
            chmod +x ./scripts/validate-docs.sh
            ./scripts/validate-docs.sh
          else
            echo "⚠️ Documentation validation script not found, skipping"
          fi

          # Run control count verification
          if [[ -f "./scripts/count-controls.sh" ]]; then
            chmod +x ./scripts/count-controls.sh
            ./scripts/count-controls.sh
          else
            echo "⚠️ Control counting script not found, skipping"
          fi

          # Run functional synchronization check (dogfooding plus validation)
          if [[ -f "./scripts/sync-security-controls.sh" ]]; then
            chmod +x ./scripts/sync-security-controls.sh
            ./scripts/sync-security-controls.sh --check
          else
            echo "⚠️ Security control sync script not found, skipping"
          fi

  security-audit:
    name: 🚫 Security Dependency Audit (Blocking)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # v1
        with:
          toolchain: stable

      - name: Install cargo-deny
        run: |
          set -euo pipefail
          # Install cargo-deny for comprehensive dependency auditing
          cargo install --locked cargo-deny

      - name: Run cargo-deny security audit
        run: |
          set -euo pipefail

          # Create minimal deny.toml if it doesn't exist
          if [[ ! -f "deny.toml" ]]; then
            echo "Creating minimal deny.toml for security audit..."
            cat > deny.toml << 'EOF'
          [graph]
          targets = []

          [advisories]
          vulnerability = "deny"
          unmaintained = "warn"
          yanked = "warn"
          notice = "warn"

          [licenses]
          unlicensed = "deny"
          allow = ["Apache-2.0", "MIT", "BSD-3-Clause", "ISC", "Unicode-DFS-2016"]
          deny = ["GPL-2.0", "GPL-3.0", "AGPL-1.0", "AGPL-3.0"]

          [bans]
          multiple-versions = "warn"
          wildcards = "warn"
          deny = []

          [sources]
          unknown-registry = "warn"
          unknown-git = "warn"
          EOF
          fi

          # Check if there are any Rust crates to audit
          if [[ -f "Cargo.lock" ]] && [[ $(grep -c "^name = " Cargo.lock 2>/dev/null || echo "0") -gt 1 ]]; then
            # Run comprehensive security audit
            echo "🔍 Running cargo-deny security audit..."
            cargo deny check advisories
          else
            echo "📝 No Rust dependencies found to audit (empty workspace or no Cargo.lock)"
            echo "✅ Skipping cargo-deny audit - no security dependencies to check"
          fi

      - name: Run dependency analysis
        run: |
          set -euo pipefail

          echo "📊 Analyzing dependency licenses..."
          cargo deny check licenses || true

          echo "📊 Checking for banned dependencies..."
          cargo deny check bans || true

          echo "📊 Validating dependency sources..."
          cargo deny check sources || true

      - name: Upload security audit results
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        if: always()
        with:
          name: security-audit-report
          path: |
            deny.toml
            Cargo.lock

  supply-chain-security:
    name: Supply Chain Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Validate GitHub Actions pinning
        run: |
          set -euo pipefail

          echo "🔍 Validating GitHub Actions SHA pinning..."

          # Use our own pinactlite tool if available
          if [[ -x "./.security-controls/bin/pinactlite" ]]; then
            ./.security-controls/bin/pinactlite pincheck --dir .github/workflows
          else
            echo "⚠️ Local pinactlite not found, performing manual checks..."

            # Manual validation of workflow pinning
            unpinned_actions=$(find .github/workflows -name "*.yml" -exec grep -l "@[a-zA-Z]" {} \; | wc -l | tr -d ' ')

            if [[ $unpinned_actions -gt 0 ]]; then
              echo "❌ Found potentially unpinned actions"
              find .github/workflows -name "*.yml" -exec grep -H "@[a-zA-Z]" {} \; || true
              exit 1
            else
              echo "✅ All actions appear to be SHA-pinned"
            fi
          fi

      - name: Analyze dependency chain integrity
        run: |
          set -euo pipefail

          echo "🔍 Analyzing supply chain integrity..."

          # Check for lock files presence
          if [[ -f "Cargo.lock" ]]; then
            echo "✅ Cargo.lock found - dependencies are locked"
          else
            echo "⚠️ No Cargo.lock found - dependencies may be unstable"
          fi

          if [[ -f "package-lock.json" ]]; then
            echo "✅ package-lock.json found - Node.js dependencies are locked"
          fi

          if [[ -f "yarn.lock" ]]; then
            echo "✅ yarn.lock found - Yarn dependencies are locked"
          fi

          if [[ -f "requirements.txt" ]] || [[ -f "Pipfile.lock" ]]; then
            echo "✅ Python dependency locks found"
          fi

          # Check for dependency confusion risks
          if [[ -f "package.json" ]]; then
            echo "🔍 Checking for potential dependency confusion..."
            if grep -q '"name":.*"@' package.json; then
              echo "✅ Scoped packages detected - reduced dependency confusion risk"
            fi
          fi

      - name: Validate repository security settings
        run: |
          set -euo pipefail

          echo "🔍 Validating repository security posture..."

          # Check for security-focused configurations
          security_configs=0

          if [[ -f ".github/dependabot.yml" ]]; then
            echo "✅ Dependabot configuration found"
            security_configs=$((security_configs + 1))
          fi

          if [[ -f ".github/workflows/codeql.yml" ]]; then
            echo "✅ CodeQL workflow found"
            security_configs=$((security_configs + 1))
          fi

          if [[ -f "deny.toml" ]]; then
            echo "✅ Cargo deny configuration found"
            security_configs=$((security_configs + 1))
          fi

          if [[ -f ".security-controls/config.env" ]]; then
            echo "✅ Security controls configuration found"
            security_configs=$((security_configs + 1))
          fi

          echo "📊 Security configurations found: $security_configs"

          if [[ $security_configs -lt 2 ]]; then
            echo "⚠️ Consider adding more security configurations"
          else
            echo "✅ Good security configuration coverage"
          fi

  license-compliance:
    name: ⚠️ License Compliance Check (Redundant - Pre-push covers this)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Validate repository license (Redundant check - blocked in pre-push)
        run: |
          set -euo pipefail

          echo "🔍 Validating repository licensing..."

          if [[ -f "LICENSE" ]]; then
            echo "✅ LICENSE file found"

            # Check license type
            if grep -q "Apache License" LICENSE; then
              echo "✅ Apache 2.0 license detected"
            elif grep -q "MIT License" LICENSE; then
              echo "✅ MIT license detected"
            elif grep -q "BSD" LICENSE; then
              echo "✅ BSD license detected"
            else
              echo "⚠️ Custom or unrecognized license"
              head -5 LICENSE
            fi

            # Check for proper attribution
            if grep -q "Copyright" LICENSE; then
              echo "✅ Copyright notice found"
            else
              echo "⚠️ No copyright notice found"
            fi

          else
            echo "❌ No LICENSE file found"
            exit 1
          fi

      - name: Check source file license headers
        run: |
          set -euo pipefail

          echo "🔍 Checking source file license compliance..."

          # Check shell scripts for license headers
          shell_scripts=$(find . -name "*.sh" -not -path "./.git/*" | head -10)

          if [[ -n "$shell_scripts" ]]; then
            echo "📋 Checking shell scripts for license headers..."

            missing_headers=0
            while IFS= read -r script; do
              if [[ -n "$script" ]]; then
                if ! head -20 "$script" | grep -q -i "license\|copyright"; then
                  echo "⚠️ $script: No license header found"
                  ((missing_headers++))
                fi
              fi
            done <<< "$shell_scripts"

            if [[ $missing_headers -gt 0 ]]; then
              echo "⚠️ $missing_headers files missing license headers"
            else
              echo "✅ License headers compliance check passed"
            fi
          fi

      - name: Generate license compliance report
        run: |
          set -euo pipefail

          echo "📊 Generating license compliance report..."

          # Create compliance report
          echo "# License Compliance Report" > license-compliance-report.md
          echo "" >> license-compliance-report.md
          echo "## Repository License" >> license-compliance-report.md

          # Check for LICENSE file
          if [[ -f "LICENSE" ]]; then
            echo "- Status: ✅ Present" >> license-compliance-report.md
            echo "- License: $(head -1 LICENSE 2>/dev/null)" >> license-compliance-report.md
          else
            echo "- Status: ❌ Missing" >> license-compliance-report.md
            echo "- License: Not found" >> license-compliance-report.md
          fi

          echo "" >> license-compliance-report.md
          echo "## Language Ecosystems Detected" >> license-compliance-report.md

          # Check for various language files
          [[ -f "Cargo.toml" ]] && echo "- Rust: ✅" >> license-compliance-report.md || echo "- Rust: ❌" >> license-compliance-report.md
          [[ -f "package.json" ]] && echo "- Node.js: ✅" >> license-compliance-report.md || echo "- Node.js: ❌" >> license-compliance-report.md
          [[ -f "requirements.txt" ]] && echo "- Python: ✅" >> license-compliance-report.md || echo "- Python: ❌" >> license-compliance-report.md

          echo "" >> license-compliance-report.md
          echo "## Recommendations" >> license-compliance-report.md
          echo "1. Add license headers to source files" >> license-compliance-report.md
          echo "2. Run cargo-deny license checks for Rust dependencies" >> license-compliance-report.md
          echo "3. Consider automated license compliance tooling" >> license-compliance-report.md

          echo "✅ License compliance report generated"

      - name: Upload license compliance report
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        if: always()
        with:
          name: license-compliance-report
          path: license-compliance-report.md