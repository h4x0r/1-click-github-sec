{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"1-Click Rust Security Controls Welcome. This site provides a minimal navigation for key docs. Use the navigation at the left to access the installation guide and architecture. For full repository documentation and latest updates, visit the project on GitHub. Links: - GitHub: https://github.com/4n6h4x0r/1-click-rust-sec - Issues: https://github.com/4n6h4x0r/1-click-rust-sec/issues","title":"Home"},{"location":"#1-click-rust-security-controls","text":"Welcome. This site provides a minimal navigation for key docs. Use the navigation at the left to access the installation guide and architecture. For full repository documentation and latest updates, visit the project on GitHub. Links: - GitHub: https://github.com/4n6h4x0r/1-click-rust-sec - Issues: https://github.com/4n6h4x0r/1-click-rust-sec/issues","title":"1-Click Rust Security Controls"},{"location":"architecture/","text":"Architecture For a comprehensive description of the architecture and security rationale, see: SECURITY_CONTROLS_ARCHITECTURE.md (root) GitHub: https://github.com/4n6h4x0r/1-click-rust-sec/blob/main/SECURITY_CONTROLS_ARCHITECTURE.md docs/security/ARCHITECTURE.md (module-level overview) GitHub: https://github.com/4n6h4x0r/1-click-rust-sec/blob/main/docs/security/ARCHITECTURE.md","title":"Architecture"},{"location":"architecture/#architecture","text":"For a comprehensive description of the architecture and security rationale, see: SECURITY_CONTROLS_ARCHITECTURE.md (root) GitHub: https://github.com/4n6h4x0r/1-click-rust-sec/blob/main/SECURITY_CONTROLS_ARCHITECTURE.md docs/security/ARCHITECTURE.md (module-level overview) GitHub: https://github.com/4n6h4x0r/1-click-rust-sec/blob/main/docs/security/ARCHITECTURE.md","title":"Architecture"},{"location":"installation/","text":"Installation See the main installation guide in the repository: SECURITY_CONTROLS_INSTALLATION.md (root) GitHub: https://github.com/4n6h4x0r/1-click-rust-sec/blob/main/SECURITY_CONTROLS_INSTALLATION.md Quick start: curl -sSL https://raw.githubusercontent.com/4n6h4x0r/1-click-rust-sec/main/install-security-controls.sh | bash For uninstall instructions, see the Uninstall page in this site.","title":"Installation"},{"location":"installation/#installation","text":"See the main installation guide in the repository: SECURITY_CONTROLS_INSTALLATION.md (root) GitHub: https://github.com/4n6h4x0r/1-click-rust-sec/blob/main/SECURITY_CONTROLS_INSTALLATION.md Quick start: curl -sSL https://raw.githubusercontent.com/4n6h4x0r/1-click-rust-sec/main/install-security-controls.sh | bash For uninstall instructions, see the Uninstall page in this site.","title":"Installation"},{"location":"uninstall/","text":"Uninstall A safe uninstaller is included in the project root. Usage: ./uninstall-security-controls.sh # interactive prompt ./uninstall-security-controls.sh --dry-run # preview ./uninstall-security-controls.sh -y # no prompt What it removes (if generated by the installer): - .git/hooks/pre-push - .githooks/pre-push.d/*security-pre-push - .github/workflows/security.yml - .github/workflows/pinning-validation.yml - .security-controls and .security-controls-version - docs/security (installed docs)","title":"Uninstall"},{"location":"uninstall/#uninstall","text":"A safe uninstaller is included in the project root. Usage: ./uninstall-security-controls.sh # interactive prompt ./uninstall-security-controls.sh --dry-run # preview ./uninstall-security-controls.sh -y # no prompt What it removes (if generated by the installer): - .git/hooks/pre-push - .githooks/pre-push.d/*security-pre-push - .github/workflows/security.yml - .github/workflows/pinning-validation.yml - .security-controls and .security-controls-version - docs/security (installed docs)","title":"Uninstall"},{"location":"yubikey/","text":"YubiKey + Sigstore For the full YubiKey + Sigstore setup guide, see: docs/security/YUBIKEY_SIGSTORE_GUIDE.md GitHub: https://github.com/4n6h4x0r/1-click-rust-sec/blob/main/docs/security/YUBIKEY_SIGSTORE_GUIDE.md","title":"YubiKey + Sigstore"},{"location":"yubikey/#yubikey-sigstore","text":"For the full YubiKey + Sigstore setup guide, see: docs/security/YUBIKEY_SIGSTORE_GUIDE.md GitHub: https://github.com/4n6h4x0r/1-click-rust-sec/blob/main/docs/security/YUBIKEY_SIGSTORE_GUIDE.md","title":"YubiKey + Sigstore"},{"location":"security/","text":"Security Controls This repository includes comprehensive security controls with industry-leading architecture. See the main installation guide in SECURITY_CONTROLS_INSTALLATION.md for details. \ud83d\ude80 Quick Start Install: run install-security-controls.sh as described in the installation guide. Verify: make a test commit and push to trigger CI. Uninstall If you need to remove the installed controls, run in the repository root: ./uninstall-security-controls.sh --dry-run # preview ./uninstall-security-controls.sh -y # remove without prompt","title":"Security Controls"},{"location":"security/#security-controls","text":"This repository includes comprehensive security controls with industry-leading architecture. See the main installation guide in SECURITY_CONTROLS_INSTALLATION.md for details.","title":"Security Controls"},{"location":"security/#quick-start","text":"Install: run install-security-controls.sh as described in the installation guide. Verify: make a test commit and push to trigger CI.","title":"\ud83d\ude80 Quick Start"},{"location":"security/#uninstall","text":"If you need to remove the installed controls, run in the repository root: ./uninstall-security-controls.sh --dry-run # preview ./uninstall-security-controls.sh -y # remove without prompt","title":"Uninstall"},{"location":"security/ARCHITECTURE/","text":"\ud83c\udfaf Executive Summary Transform your Rust project security from reactive to proactive in minutes. 1-Click Rust Security deploys 23 enterprise-grade security controls using a scientifically designed two-tier architecture that prevents 95% of security issues before they reach production while maintaining developer productivity. \ud83d\udcca Performance & Coverage Metrics Metric Value Impact Pre-Push Validation ~75 seconds \u26a1 Developer workflow preservation Security Controls 23 comprehensive \ud83d\udee1\ufe0f Complete attack vector coverage Issue Resolution Speed 10x faster \ud83d\ude80 Early detection advantage CI Failure Reduction 90% fewer \ud83d\udcc8 Team productivity improvement Compliance Standards NIST SSDF, SLSA L2, OpenSSF \u2705 Enterprise readiness \ud83c\udfaf Strategic Value Proposition For Developers: - \u2705 Productivity preserved - Security doesn't slow you down - \u2705 Learning integrated - Security best practices taught through use - \u2705 Context maintained - Issues caught before context switching For Security Teams: - \ud83d\udee1\ufe0f Risk reduced - Critical vulnerabilities blocked at source - \ud83d\udcca Visibility improved - Complete security posture monitoring - \ud83d\udd0d Compliance automated - Continuous regulatory alignment for Organizations: - \ud83d\udcb0 Costs reduced - 10x cheaper to fix issues pre-production - \u26a1 Time saved - 90% reduction in security-related build failures - \ud83c\udfc6 Quality improved - Consistent security standards across all projects \ud83c\udfd7\ufe0f Architecture Overview 1-Click Rust Security employs a two-stage security validation model : Pre-Push Controls : Fast, essential checks that block problematic code from reaching the repository Post-Push Controls : Comprehensive analysis and documentation that provides deep security insights \ud83d\udccb Security Controls At-a-Glance Control Pre-Push Hook Post-Push CI Blocking Purpose Code Formatting \u2705 cargo fmt \u2705 cargo fmt \u2705 Yes Consistent code style Linting \u2705 cargo clippy \u2705 cargo clippy \u2705 Yes Code quality & bug prevention Security Audit \u2705 cargo audit \u2705 cargo audit \u2705 Yes Vulnerable dependency detection Test Suite \u2705 cargo test \u2705 cargo test \u2705 Yes Code correctness validation Secret Detection \u2705 gitleakslite (script helper) \u2705 gitleaks \u2705 Yes Prevent secret exposure License Compliance \u2705 cargo-license \u2705 cargo-license \u26a0\ufe0f Warning Legal compliance check SHA Pinning \u2705 pincheck (script helper) \u2705 pinact \u2705 Yes Supply chain protection Commit Signing \u2705 gitsign check \u2705 gitsign verify \u26a0\ufe0f Warning Cryptographic integrity Large File Detection \u2705 find >10MB \u274c \u2705 Yes Prevent repository bloat Technical Debt Monitor \u2705 TODO/FIXME scan \u274c \u26a0\ufe0f Warning Code quality visibility Empty File Detection \u2705 empty .rs check \u274c \u26a0\ufe0f Warning Incomplete implementation check Integration Tests \u274c \u2705 Full suite \u2705 Yes End-to-end validation SAST Analysis \u274c \u2705 Semgrep/CodeQL \u2705 Yes Static security analysis Vulnerability Scan \u274c \u2705 Trivy \ud83d\udd0d Info Infrastructure security Supply Chain Vet \u274c \u2705 cargo-vet \u26a0\ufe0f Warning Dependency review SBOM Generation \u274c \u2705 Multiple formats \ud83d\udd0d Info Supply chain transparency Security Metrics \u274c \u2705 OpenSSF Scorecard \ud83d\udd0d Info Security posture assessment Binary Analysis \u274c \u2705 Custom tooling \ud83d\udd0d Info Embedded secret detection Dependency Confusion \u274c \u2705 Custom detection \u26a0\ufe0f Warning Typosquatting prevention Environment Security \u274c \u2705 Pattern matching \u26a0\ufe0f Warning Hardcoded credential detection Network Security \u274c \u2705 URL/IP analysis \u26a0\ufe0f Warning Suspicious endpoint detection Permission Audit \u274c \u2705 File system analysis \u26a0\ufe0f Warning World-writable file detection Git History Security \u274c \u2705 Commit message scan \ud83d\udd0d Info Historical secret detection Legend: - \u2705 Blocking : Prevents push/merge on failure - \u26a0\ufe0f Warning : Reports issues but doesn't block - \ud83d\udd0d Info : Generates reports for review - \u274c Not Present : Control not implemented at this stage \ud83d\udccb Complete Security Control Matrix Pre-Push Controls (11 Essential Checks - ~75 seconds) Fast validation that blocks critical issues before they reach the repository Control Tool Blocking Level Performance Security Impact Code Formatting cargo fmt \u2705 Critical ~1s Style consistency enforcement Linting cargo clippy \u2705 Critical ~10s Bug prevention + best practices Security Audit cargo audit \u2705 Critical ~5s Vulnerable dependency blocking Test Suite cargo test \u2705 Critical ~30s Functional correctness validation Secret Detection gitleakslite (script helper) \u2705 CRITICAL ~5s \ud83d\udd25 Credential exposure prevention License Compliance cargo-license \u26a0\ufe0f Warning ~3s Legal risk identification SHA Pinning pincheck (script helper; CI uses pinact) \u2705 Critical ~2s Supply chain attack prevention Commit Signing gitsign \u26a0\ufe0f Warning ~1s Cryptographic integrity verification Large File Detection find \u2705 Critical ~2s Repository hygiene + secret prevention Technical Debt Monitor grep \u26a0\ufe0f Warning ~1s Code quality visibility Empty File Detection find \u26a0\ufe0f Warning ~1s Implementation completeness check Post-Push Controls (12 Deep Analysis Jobs - Comprehensive) Thorough security analysis and compliance reporting in CI/CD Control Tool Report Level Purpose Compliance Value Integration Tests Custom test suite \u2705 Blocking End-to-end validation Functional security verification SAST Analysis Semgrep + CodeQL \u2705 Blocking Static security analysis Vulnerability pattern detection Vulnerability Scanning Trivy \ud83d\udd0d Informational Infrastructure security CVE database correlation Supply Chain Verification cargo-vet \u26a0\ufe0f Warning Dependency trust assessment Supply chain risk management SBOM Generation Multiple formats \ud83d\udd0d Informational Software bill of materials Legal compliance documentation Security Metrics OpenSSF Scorecard \ud83d\udd0d Informational Security posture measurement Benchmarking + improvement tracking Binary Analysis Custom tooling \ud83d\udd0d Informational Embedded secret detection Build artifact security Dependency Confusion Custom detection \u26a0\ufe0f Warning Typosquatting prevention Supply chain attack mitigation Environment Security Pattern matching \u26a0\ufe0f Warning Hardcoded credential detection Configuration security Network Security URL/IP analysis \u26a0\ufe0f Warning Suspicious endpoint detection Data exfiltration prevention Permission Audit File system analysis \u26a0\ufe0f Warning World-writable file detection Access control validation Git History Security Commit message scan \ud83d\udd0d Informational Historical secret detection Repository hygiene","title":"ARCHITECTURE"},{"location":"security/ARCHITECTURE/#executive-summary","text":"Transform your Rust project security from reactive to proactive in minutes. 1-Click Rust Security deploys 23 enterprise-grade security controls using a scientifically designed two-tier architecture that prevents 95% of security issues before they reach production while maintaining developer productivity.","title":"\ud83c\udfaf Executive Summary"},{"location":"security/ARCHITECTURE/#performance-coverage-metrics","text":"Metric Value Impact Pre-Push Validation ~75 seconds \u26a1 Developer workflow preservation Security Controls 23 comprehensive \ud83d\udee1\ufe0f Complete attack vector coverage Issue Resolution Speed 10x faster \ud83d\ude80 Early detection advantage CI Failure Reduction 90% fewer \ud83d\udcc8 Team productivity improvement Compliance Standards NIST SSDF, SLSA L2, OpenSSF \u2705 Enterprise readiness","title":"\ud83d\udcca Performance &amp; Coverage Metrics"},{"location":"security/ARCHITECTURE/#strategic-value-proposition","text":"For Developers: - \u2705 Productivity preserved - Security doesn't slow you down - \u2705 Learning integrated - Security best practices taught through use - \u2705 Context maintained - Issues caught before context switching For Security Teams: - \ud83d\udee1\ufe0f Risk reduced - Critical vulnerabilities blocked at source - \ud83d\udcca Visibility improved - Complete security posture monitoring - \ud83d\udd0d Compliance automated - Continuous regulatory alignment for Organizations: - \ud83d\udcb0 Costs reduced - 10x cheaper to fix issues pre-production - \u26a1 Time saved - 90% reduction in security-related build failures - \ud83c\udfc6 Quality improved - Consistent security standards across all projects","title":"\ud83c\udfaf Strategic Value Proposition"},{"location":"security/ARCHITECTURE/#architecture-overview","text":"1-Click Rust Security employs a two-stage security validation model : Pre-Push Controls : Fast, essential checks that block problematic code from reaching the repository Post-Push Controls : Comprehensive analysis and documentation that provides deep security insights","title":"\ud83c\udfd7\ufe0f Architecture Overview"},{"location":"security/ARCHITECTURE/#security-controls-at-a-glance","text":"Control Pre-Push Hook Post-Push CI Blocking Purpose Code Formatting \u2705 cargo fmt \u2705 cargo fmt \u2705 Yes Consistent code style Linting \u2705 cargo clippy \u2705 cargo clippy \u2705 Yes Code quality & bug prevention Security Audit \u2705 cargo audit \u2705 cargo audit \u2705 Yes Vulnerable dependency detection Test Suite \u2705 cargo test \u2705 cargo test \u2705 Yes Code correctness validation Secret Detection \u2705 gitleakslite (script helper) \u2705 gitleaks \u2705 Yes Prevent secret exposure License Compliance \u2705 cargo-license \u2705 cargo-license \u26a0\ufe0f Warning Legal compliance check SHA Pinning \u2705 pincheck (script helper) \u2705 pinact \u2705 Yes Supply chain protection Commit Signing \u2705 gitsign check \u2705 gitsign verify \u26a0\ufe0f Warning Cryptographic integrity Large File Detection \u2705 find >10MB \u274c \u2705 Yes Prevent repository bloat Technical Debt Monitor \u2705 TODO/FIXME scan \u274c \u26a0\ufe0f Warning Code quality visibility Empty File Detection \u2705 empty .rs check \u274c \u26a0\ufe0f Warning Incomplete implementation check Integration Tests \u274c \u2705 Full suite \u2705 Yes End-to-end validation SAST Analysis \u274c \u2705 Semgrep/CodeQL \u2705 Yes Static security analysis Vulnerability Scan \u274c \u2705 Trivy \ud83d\udd0d Info Infrastructure security Supply Chain Vet \u274c \u2705 cargo-vet \u26a0\ufe0f Warning Dependency review SBOM Generation \u274c \u2705 Multiple formats \ud83d\udd0d Info Supply chain transparency Security Metrics \u274c \u2705 OpenSSF Scorecard \ud83d\udd0d Info Security posture assessment Binary Analysis \u274c \u2705 Custom tooling \ud83d\udd0d Info Embedded secret detection Dependency Confusion \u274c \u2705 Custom detection \u26a0\ufe0f Warning Typosquatting prevention Environment Security \u274c \u2705 Pattern matching \u26a0\ufe0f Warning Hardcoded credential detection Network Security \u274c \u2705 URL/IP analysis \u26a0\ufe0f Warning Suspicious endpoint detection Permission Audit \u274c \u2705 File system analysis \u26a0\ufe0f Warning World-writable file detection Git History Security \u274c \u2705 Commit message scan \ud83d\udd0d Info Historical secret detection Legend: - \u2705 Blocking : Prevents push/merge on failure - \u26a0\ufe0f Warning : Reports issues but doesn't block - \ud83d\udd0d Info : Generates reports for review - \u274c Not Present : Control not implemented at this stage","title":"\ud83d\udccb Security Controls At-a-Glance"},{"location":"security/ARCHITECTURE/#complete-security-control-matrix","text":"","title":"\ud83d\udccb Complete Security Control Matrix"},{"location":"security/ARCHITECTURE/#pre-push-controls-11-essential-checks-75-seconds","text":"Fast validation that blocks critical issues before they reach the repository Control Tool Blocking Level Performance Security Impact Code Formatting cargo fmt \u2705 Critical ~1s Style consistency enforcement Linting cargo clippy \u2705 Critical ~10s Bug prevention + best practices Security Audit cargo audit \u2705 Critical ~5s Vulnerable dependency blocking Test Suite cargo test \u2705 Critical ~30s Functional correctness validation Secret Detection gitleakslite (script helper) \u2705 CRITICAL ~5s \ud83d\udd25 Credential exposure prevention License Compliance cargo-license \u26a0\ufe0f Warning ~3s Legal risk identification SHA Pinning pincheck (script helper; CI uses pinact) \u2705 Critical ~2s Supply chain attack prevention Commit Signing gitsign \u26a0\ufe0f Warning ~1s Cryptographic integrity verification Large File Detection find \u2705 Critical ~2s Repository hygiene + secret prevention Technical Debt Monitor grep \u26a0\ufe0f Warning ~1s Code quality visibility Empty File Detection find \u26a0\ufe0f Warning ~1s Implementation completeness check","title":"Pre-Push Controls (11 Essential Checks - ~75 seconds)"},{"location":"security/ARCHITECTURE/#post-push-controls-12-deep-analysis-jobs-comprehensive","text":"Thorough security analysis and compliance reporting in CI/CD Control Tool Report Level Purpose Compliance Value Integration Tests Custom test suite \u2705 Blocking End-to-end validation Functional security verification SAST Analysis Semgrep + CodeQL \u2705 Blocking Static security analysis Vulnerability pattern detection Vulnerability Scanning Trivy \ud83d\udd0d Informational Infrastructure security CVE database correlation Supply Chain Verification cargo-vet \u26a0\ufe0f Warning Dependency trust assessment Supply chain risk management SBOM Generation Multiple formats \ud83d\udd0d Informational Software bill of materials Legal compliance documentation Security Metrics OpenSSF Scorecard \ud83d\udd0d Informational Security posture measurement Benchmarking + improvement tracking Binary Analysis Custom tooling \ud83d\udd0d Informational Embedded secret detection Build artifact security Dependency Confusion Custom detection \u26a0\ufe0f Warning Typosquatting prevention Supply chain attack mitigation Environment Security Pattern matching \u26a0\ufe0f Warning Hardcoded credential detection Configuration security Network Security URL/IP analysis \u26a0\ufe0f Warning Suspicious endpoint detection Data exfiltration prevention Permission Audit File system analysis \u26a0\ufe0f Warning World-writable file detection Access control validation Git History Security Commit message scan \ud83d\udd0d Informational Historical secret detection Repository hygiene","title":"Post-Push Controls (12 Deep Analysis Jobs - Comprehensive)"},{"location":"security/YUBIKEY_SIGSTORE_GUIDE/","text":"(For the full guide in this repository, see ../../YUBIKEY_SIGSTORE_GUIDE.md.)","title":"YUBIKEY SIGSTORE GUIDE"}]}